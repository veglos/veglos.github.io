<feed xmlns="http://www.w3.org/2005/Atom"> <id>/</id><title>Veglos' Blog</title><subtitle>Software architecture and tips.</subtitle> <updated>2022-11-18T00:49:41-03:00</updated> <author> <name>Carlos Vega Hernandez</name> <uri>/</uri> </author><link rel="self" type="application/atom+xml" href="/feed.xml"/><link rel="alternate" type="text/html" hreflang="en-US" href="/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2022 Carlos Vega Hernandez </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Inheritance with typeorm and mongodb</title><link href="/posts/nodejs-inheritance-with-typeorm-and-mongodb/" rel="alternate" type="text/html" title="Inheritance with typeorm and mongodb" /><published>2022-11-18T00:00:00-03:00</published> <updated>2022-11-18T00:00:00-03:00</updated> <id>/posts/nodejs-inheritance-with-typeorm-and-mongodb/</id> <content src="/posts/nodejs-inheritance-with-typeorm-and-mongodb/" /> <author> <name>Carlos Vega Hernandez</name> </author> <category term="howto" /> <summary> The code of this project is available at https://github.com/veglos/nodejs-typeorm-mongodb-inheritance The problem A few days ago I started working with Node.js, TypeORM and MongoDB, and naturally I wanted to reflect my domain’s model into collections. Everything went smoothly until I hit some classes that inherited from an abstract class. The solution is not complex, but I couldn’t find an... </summary> </entry> <entry><title>Simple SOLID</title><link href="/posts/simple-solid/" rel="alternate" type="text/html" title="Simple SOLID" /><published>2022-01-30T00:00:00-03:00</published> <updated>2022-01-30T16:09:28-03:00</updated> <id>/posts/simple-solid/</id> <content src="/posts/simple-solid/" /> <author> <name>Carlos Vega Hernandez</name> </author> <category term="example" /> <summary> Table of contents Single-Responsibility Principle Open-Closed Principle Liskov Substitution Principle Interface Segregation Principle Dependency Inversion Principle 1. Single-Responsibility Principle There should never be more than one reason for a class to change. Violation /* This class has two reasons to change: it's properties and storing data in the database */ public... </summary> </entry> <entry><title>An Auth Microservice with Clean Architecture</title><link href="/posts/dotnet-auth-microservice-with-clean-architecture/" rel="alternate" type="text/html" title="An Auth Microservice with Clean Architecture" /><published>2021-11-08T00:00:00-03:00</published> <updated>2021-11-12T11:40:49-03:00</updated> <id>/posts/dotnet-auth-microservice-with-clean-architecture/</id> <content src="/posts/dotnet-auth-microservice-with-clean-architecture/" /> <author> <name>Carlos Vega Hernandez</name> </author> <category term="example" /> <summary> The code of this project is available at https://github.com/veglos/dotnet-auth-microservice Table of contents A Clean Architecture The Hexagonal Architecture The Design Use Cases The Auth Microservice What about an API Gateway? OAuth 2.0, OpenID Connect, and Json Web Token Access Token vs Refresh Token JWT, JWS, and JWE How do o... </summary> </entry> <entry><title>Setup Django and Docker</title><link href="/posts/setup-django-and-docker/" rel="alternate" type="text/html" title="Setup Django and Docker" /><published>2021-07-15T00:00:00-04:00</published> <updated>2021-07-15T18:31:23-04:00</updated> <id>/posts/setup-django-and-docker/</id> <content src="/posts/setup-django-and-docker/" /> <author> <name>Carlos Vega Hernandez</name> </author> <category term="howto" /> <summary> Intro It is possible to develop only with Docker (rather than a local system). Therefore a virtual environment is not necessary since dependencies are always installed in the container. Also, environment variables are fetched with docker-compose.yml, and then again django-environ is not really necessary. However I want to be able to keep both options available, since Docker might not always be... </summary> </entry> <entry><title>Facebook Sign In with ASP.NET Core Web API</title><link href="/posts/facebook-signin-with-aspnetcore-web-api/" rel="alternate" type="text/html" title="Facebook Sign In with ASP.NET Core Web API" /><published>2021-05-05T00:00:00-04:00</published> <updated>2021-07-15T11:43:08-04:00</updated> <id>/posts/facebook-signin-with-aspnetcore-web-api/</id> <content src="/posts/facebook-signin-with-aspnetcore-web-api/" /> <author> <name>Carlos Vega Hernandez</name> </author> <category term="howto" /> <summary> Similar to my previous post Google Sign In with ASP.NET Core Web API, now with Facebook. The complete project is hosted on https://github.com/veglos/dotnet-facebook-signin-api. Diagram diagram of facebook sign in Pre-Requirements We must create an App in Facebook for Developers and get the App ID and App Secret generated by Facebook. We will use them later for token validation. Front-end ... </summary> </entry> </feed>
